//Romet Naruskberg

//Exercise 1

let array1 = [1, 2, 3];
let array2 = [2, 30, 1];
let array3 = array1.concat(array2);
array3 = [...new Set([...array1,...array2])]

console.log("\nExercise 1");
console.log(array3);

//Exercise 2

console.log("\nExercise 2");
function showUserIp() {
const ipaddress = Object.values(require("os").networkInterfaces())
    .flat()
    .filter((item) => !item.internal && item.family === "IPv4")
    .find(Boolean).address;
return ipaddress;
}

console.log(showUserIp());

//Exercise 3

console.log("\nExercise 3");
const persons = [
{
    name: "Julia",
    age: 27,
},
{
    name: "Martin",
    age: 45,
},
{
    name: "Taavi",
    age: 17,
},
{
    name: "Emma",
    age: 2,
},
{
    name: "Ricky",
    age: 62,
},
];


const totalSumOfAges =persons.reduce((agetotal, person) => agetotal + person.age, 0)
console.log(totalSumOfAges);

//Exercise 4

console.log("\nExercise 4");
const persons2 = [
    {
        name: 'Julia',
        age: 27
    },
    {
        name: 'Martin',
        age: 45
    },
    {
        name: 'Taavi',
        age: 17
    },
    {
        name: 'Emma',
        age: 2
    },
    {
        name: 'Ricky',
        age: 62
    }
]
const boyNames = ['Martin', 'Taavi', 'Ricky']
const girlNames = ['Julia', 'Emma']
const people = {
    boys: persons2.filter(person => boyNames.includes(person.name)),
    girls: persons2.filter(person => girlNames.includes(person.name)),
}
const youngerpeople = {
    boys: persons2.filter(person => boyNames.includes(person.name) && person.age < 30),
    girls: persons2.filter(person => girlNames.includes(person.name) && person.age < 30),
}
console.log(people)
console.log(youngerpeople)

//Exercise 5

console.log("\nExercise 5");
const persons3 = [
    {
        name: 'Julia',
        age: 27
    },
    {
        name: 'Martin',
        age: 45
    },
    {
        name: 'Taavi',
        age: 17
    },
    {
        name: 'Emma',
        age: 2
    },
    {
        name: 'Ricky',
        age: 62
    }
]

const personsUppercase = persons3.map(
    person => Object.entries(person).map(
        ([key, value]) => ([key.toUpperCase(), value])
    )
);


console.log(personsUppercase)
